name: Auto Claude OAuth Token Refresh

on:
  schedule:
    # 毎日午前6時（UTC）にトークンを自動更新
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force token refresh even if not expired'
        required: false
        default: false
        type: boolean

jobs:
  refresh-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install
          
      - name: Check if refresh is needed
        id: check-refresh
        run: |
          node -e "
          const fs = require('fs');
          const expiresAt = '${{ secrets.CLAUDE_EXPIRES_AT }}';
          const forceRefresh = '${{ github.event.inputs.force_refresh }}' === 'true';
          const now = Date.now();
          const expiryTime = parseInt(expiresAt);
          const hoursLeft = Math.floor((expiryTime - now) / (1000 * 60 * 60));
          
          console.log('Current time:', new Date(now).toISOString());
          console.log('Token expires at:', new Date(expiryTime).toISOString());
          console.log('Hours until expiry:', hoursLeft);
          console.log('Force refresh:', forceRefresh);
          
          if (hoursLeft <= 6 || forceRefresh) {
            console.log('Token refresh needed');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'should_refresh=true\n');
          } else {
            console.log('Token refresh not needed');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'should_refresh=false\n');
          }
          "
          
      - name: Refresh OAuth token
        if: steps.check-refresh.outputs.should_refresh == 'true'
        id: refresh
        run: |
          node -e "
          const fs = require('fs');
          const https = require('https');
          
          const refreshToken = '${{ secrets.CLAUDE_REFRESH_TOKEN }}';
          
          const postData = JSON.stringify({
            grant_type: 'refresh_token',
            refresh_token: refreshToken
          });
          
          const options = {
            hostname: 'claude.ai',
            port: 443,
            path: '/api/oauth/token',
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Content-Length': Buffer.byteLength(postData)
            }
          };
          
          const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
              data += chunk;
            });
            
            res.on('end', () => {
              try {
                const response = JSON.parse(data);
                
                if (res.statusCode === 200 && response.access_token) {
                  console.log('Token refresh successful');
                  
                  const expiresAt = Date.now() + (response.expires_in * 1000);
                  
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, \`access_token=\${response.access_token}\n\`);
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, \`refresh_token=\${response.refresh_token || refreshToken}\n\`);
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, \`expires_at=\${expiresAt}\n\`);
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, 'success=true\n');
                } else {
                  console.error('Token refresh failed:', data);
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, 'success=false\n');
                  process.exit(1);
                }
              } catch (error) {
                console.error('Failed to parse response:', error);
                fs.appendFileSync(process.env.GITHUB_OUTPUT, 'success=false\n');
                process.exit(1);
              }
            });
          });
          
          req.on('error', (error) => {
            console.error('Request failed:', error);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 'success=false\n');
            process.exit(1);
          });
          
          req.write(postData);
          req.end();
          "
          
      - name: Update GitHub Secrets
        if: steps.refresh.outputs.success == 'true'
        run: |
          gh secret set CLAUDE_ACCESS_TOKEN --body "${{ steps.refresh.outputs.access_token }}"
          gh secret set CLAUDE_REFRESH_TOKEN --body "${{ steps.refresh.outputs.refresh_token }}"
          gh secret set CLAUDE_EXPIRES_AT --body "${{ steps.refresh.outputs.expires_at }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Close existing token refresh issues
        if: steps.refresh.outputs.success == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['claude-oauth-token']
              });
              
              for (const issue of issues.data) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '✅ Token has been automatically refreshed. This issue is now closed.'
                });
              }
              
              if (issues.data.length > 0) {
                console.log(`Closed ${issues.data.length} token refresh issue(s)`);
              } else {
                console.log('No open token refresh issues found');
              }
            } catch (error) {
              console.log('Warning: Could not close issues (Issues may be disabled for this repository)');
              console.log('Error:', error.message);
            }
            
      - name: Send success notification
        if: steps.refresh.outputs.success == 'true'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Claude OAuth Token Refreshed Successfully\n\nThe Claude OAuth token has been automatically refreshed and updated in GitHub Secrets.\n\nRepository: ${{ github.repository }}"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL not configured, skipping notification"
          fi 