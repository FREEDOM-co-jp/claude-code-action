name: Claude OAuth Token Monitor

on:
  schedule:
    # 毎日午前6時（UTC）にトークンの状態をチェック
    - cron: '0 6 * * *'
    # 毎日午後6時（UTC）にも追加チェック
    - cron: '0 18 * * *'
  workflow_dispatch:
    inputs:
      force_check:
        description: 'Force token status check'
        required: false
        default: false
        type: boolean

jobs:
  monitor-token:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm install
          
      - name: Check token status
        id: check-token
        run: |
          node -e "
          const fs = require('fs');
          const expiresAt = '${{ secrets.CLAUDE_EXPIRES_AT }}';
          const forceCheck = '${{ github.event.inputs.force_check }}' === 'true';
          const now = Date.now();
          const expiryTime = parseInt(expiresAt);
          const hoursLeft = Math.floor((expiryTime - now) / (1000 * 60 * 60));
          const daysLeft = Math.floor(hoursLeft / 24);
          
          console.log('=== Claude Token Status Check ===');
          console.log('Current time:', new Date(now).toISOString());
          console.log('Token expires at:', new Date(expiryTime).toISOString());
          console.log('Hours until expiry:', hoursLeft);
          console.log('Days until expiry:', daysLeft);
          console.log('Force check:', forceCheck);
          
          let alertLevel = 'none';
          let alertMessage = '';
          let needsAction = false;
          
          if (hoursLeft <= 0) {
            alertLevel = 'critical';
            alertMessage = '🚨 CRITICAL: Token has EXPIRED!';
            needsAction = true;
          } else if (hoursLeft <= 6) {
            alertLevel = 'urgent';
            alertMessage = '⚠️ URGENT: Token expires in ' + hoursLeft + ' hours';
            needsAction = true;
          } else if (hoursLeft <= 24) {
            alertLevel = 'warning';
            alertMessage = '⚠️ WARNING: Token expires in ' + hoursLeft + ' hours (less than 1 day)';
            needsAction = true;
          } else if (daysLeft <= 3) {
            alertLevel = 'notice';
            alertMessage = '📢 NOTICE: Token expires in ' + daysLeft + ' days';
            needsAction = true;
          } else if (forceCheck) {
            alertLevel = 'info';
            alertMessage = 'ℹ️ INFO: Token is healthy, expires in ' + daysLeft + ' days';
            needsAction = false;
          }
          
          console.log('Alert level:', alertLevel);
          console.log('Alert message:', alertMessage);
          console.log('Needs action:', needsAction);
          
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'alert_level=' + alertLevel + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'alert_message=' + alertMessage + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'needs_action=' + needsAction + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'hours_left=' + hoursLeft + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'days_left=' + daysLeft + '\n');
          fs.appendFileSync(process.env.GITHUB_OUTPUT, 'expires_at=' + new Date(expiryTime).toISOString() + '\n');
          
          console.log('=== End Token Status Check ===');
          "
          
      - name: Check if GitHub Issues are enabled
        if: steps.check-token.outputs.needs_action == 'true'
        id: check-issues
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('🔍 Checking if GitHub Issues are enabled...');
              const response = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 1
              });
              console.log('✅ GitHub Issues are enabled');
              core.setOutput('issues_enabled', 'true');
              return 'enabled';
            } catch (error) {
              console.log('⚠️ GitHub Issues check failed:', error.message);
              if (error.status === 410 || error.message.includes('Issues are disabled')) {
                console.log('💡 Issues are disabled for this repository');
                core.setOutput('issues_enabled', 'false');
                core.setOutput('issue_error', 'Issues are disabled for this repo');
                return 'disabled';
              } else {
                console.log('❌ Unexpected error:', error);
                core.setOutput('issues_enabled', 'error');
                core.setOutput('issue_error', error.message);
                return 'error';
              }
            }
          
      - name: Create or update GitHub issue for token renewal
        if: steps.check-token.outputs.needs_action == 'true' && steps.check-issues.outputs.issues_enabled == 'true'
        id: create-issue
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const alertLevel = '${{ steps.check-token.outputs.alert_level }}';
            const alertMessage = '${{ steps.check-token.outputs.alert_message }}';
            const hoursLeft = '${{ steps.check-token.outputs.hours_left }}';
            const daysLeft = '${{ steps.check-token.outputs.days_left }}';
            const expiresAt = '${{ steps.check-token.outputs.expires_at }}';
            
            console.log('🔍 Creating/updating GitHub issue...');
            
            // Check for existing open issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['claude-oauth-token', 'token-renewal']
            });
            
            const title = `🔑 Claude OAuth Token Renewal Required - ${alertLevel.toUpperCase()}`;
            
            let priorityEmoji = '📢';
            let urgencyText = 'scheduled renewal';
            
            if (alertLevel === 'critical') {
              priorityEmoji = '🚨';
              urgencyText = 'IMMEDIATE ACTION REQUIRED';
            } else if (alertLevel === 'urgent') {
              priorityEmoji = '⚠️';
              urgencyText = 'urgent renewal needed';
            } else if (alertLevel === 'warning') {
              priorityEmoji = '⚠️';
              urgencyText = 'renewal needed soon';
            }
            
            const body = `${priorityEmoji} **${urgencyText.toUpperCase()}**
            
            ## Token Status
            - **Current Status**: ${alertMessage}
            - **Expires At**: ${expiresAt}
            - **Time Remaining**: ${hoursLeft} hours (${daysLeft} days)
            - **Alert Level**: ${alertLevel.toUpperCase()}
            
            ## Required Actions
            
            ### 1. Manual Token Renewal
            Since automatic token refresh is currently blocked by Cloudflare, you need to manually update the token:
            
            1. **Login to Claude.ai** in your browser
            2. **Open Developer Tools** (F12)
            3. **Go to Application/Storage tab** → Cookies → claude.ai
            4. **Copy the following values**:
               - \`sessionKey\` (this is your access token)
               - \`refresh_token\`
            5. **Update GitHub Secrets**:
               - Go to repository Settings → Secrets and variables → Actions
               - Update \`CLAUDE_ACCESS_TOKEN\` with the sessionKey value
               - Update \`CLAUDE_REFRESH_TOKEN\` with the refresh_token value
               - Update \`CLAUDE_EXPIRES_AT\` with new expiration timestamp (current time + 24 hours in milliseconds)
            
            ### 2. Test the Updated Token
            Run the following command locally to verify the token works:
            \`\`\`bash
            node scripts/test-refresh-endpoints.js
            \`\`\`
            
            ### 3. Close This Issue
            Once you've successfully updated the token, close this issue.
            
            ## Automation Status
            - ❌ Automatic refresh: **DISABLED** (Cloudflare blocking)
            - ✅ Monitoring: **ACTIVE**
            - ✅ Notifications: **ACTIVE**
            
            ## Next Steps
            We're working on alternative solutions for automatic token refresh:
            - Exploring different proxy services
            - Considering headless browser automation
            - Investigating Claude API changes
            
            ---
            *This issue was automatically generated by the Claude Token Monitor workflow.*
            *Last updated: ${new Date().toISOString()}*`;
            
            if (existingIssues.data.length > 0) {
              // Update existing issue
              const issue = existingIssues.data[0];
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                title: title,
                body: body,
                labels: ['claude-oauth-token', 'token-renewal', alertLevel]
              });
              
              console.log(`✅ Updated existing issue #${issue.number}`);
              core.setOutput('issue_created', 'updated');
              core.setOutput('issue_number', issue.number);
            } else {
              // Create new issue
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['claude-oauth-token', 'token-renewal', alertLevel]
              });
              
              console.log(`✅ Created new issue #${issue.data.number}`);
              core.setOutput('issue_created', 'created');
              core.setOutput('issue_number', issue.data.number);
            }

      - name: Send workflow summary (alternative to GitHub Issues)
        if: steps.check-token.outputs.needs_action == 'true'
        run: |
          echo "## 🔑 Claude OAuth Token Renewal Alert" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ **RENEWAL NEEDED SOON**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Token Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Status**: ${{ steps.check-token.outputs.alert_message }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Expires At**: ${{ steps.check-token.outputs.expires_at }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time Remaining**: ${{ steps.check-token.outputs.hours_left }} hours (${{ steps.check-token.outputs.days_left }} days)" >> $GITHUB_STEP_SUMMARY
          echo "- **Alert Level**: ${{ steps.check-token.outputs.alert_level }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Issue Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-issues.outputs.issues_enabled }}" = "false" ]; then
            echo "- ⚠️ GitHub Issues: **DISABLED** for this repository" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.check-issues.outputs.issues_enabled }}" = "error" ]; then
            echo "- ❌ GitHub Issues: **ERROR** - ${{ steps.check-issues.outputs.issue_error }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.create-issue.outcome }}" = "failure" ]; then
            echo "- ❌ GitHub Issues: **FAILED** - Unable to create/update issue" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.create-issue.outcome }}" = "success" ]; then
            echo "- ✅ GitHub Issues: **SUCCESS** - Issue created/updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❓ GitHub Issues: **UNKNOWN STATUS**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Required Actions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Login to Claude.ai** in your browser" >> $GITHUB_STEP_SUMMARY
          echo "2. **Open Developer Tools** (F12)" >> $GITHUB_STEP_SUMMARY
          echo "3. **Go to Application/Storage tab** → Cookies → claude.ai" >> $GITHUB_STEP_SUMMARY
          echo "4. **Copy the following values**:" >> $GITHUB_STEP_SUMMARY
          echo "   - \`sessionKey\` (this is your access token)" >> $GITHUB_STEP_SUMMARY
          echo "   - \`refresh_token\`" >> $GITHUB_STEP_SUMMARY
          echo "5. **Update GitHub Secrets**:" >> $GITHUB_STEP_SUMMARY
          echo "   - Go to repository Settings → Secrets and variables → Actions" >> $GITHUB_STEP_SUMMARY
          echo "   - Update \`CLAUDE_ACCESS_TOKEN\` with the sessionKey value" >> $GITHUB_STEP_SUMMARY
          echo "   - Update \`CLAUDE_REFRESH_TOKEN\` with the refresh_token value" >> $GITHUB_STEP_SUMMARY
          echo "   - Update \`CLAUDE_EXPIRES_AT\` with new expiration timestamp" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Automation Status" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Automatic refresh: **DISABLED** (Cloudflare blocking)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Monitoring: **ACTIVE**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Notifications: **ACTIVE**" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Using workflow summary for notifications" >> $GITHUB_STEP_SUMMARY
            
      - name: Send Slack notification
        if: steps.check-token.outputs.needs_action == 'true'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            ALERT_LEVEL="${{ steps.check-token.outputs.alert_level }}"
            ALERT_MESSAGE="${{ steps.check-token.outputs.alert_message }}";
            HOURS_LEFT="${{ steps.check-token.outputs.hours_left }}";
            EXPIRES_AT="${{ steps.check-token.outputs.expires_at }}";
            
            # Set color based on alert level
            case $ALERT_LEVEL in
              "critical") COLOR="#FF0000" ;;
              "urgent") COLOR="#FF6600" ;;
              "warning") COLOR="#FFAA00" ;;
              "notice") COLOR="#0099FF" ;;
              *) COLOR="#808080" ;;
            esac
            
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"attachments\": [{
                  \"color\": \"$COLOR\",
                  \"title\": \"🔑 Claude OAuth Token Renewal Required\",
                  \"text\": \"$ALERT_MESSAGE\",
                  \"fields\": [
                    {
                      \"title\": \"Repository\",
                      \"value\": \"${{ github.repository }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Time Remaining\",
                      \"value\": \"$HOURS_LEFT hours\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Expires At\",
                      \"value\": \"$EXPIRES_AT\",
                      \"short\": false
                    },
                    {
                      \"title\": \"Action Required\",
                      \"value\": \"Manual token renewal needed - check GitHub workflow summary for instructions\",
                      \"short\": false
                    }
                  ],
                  \"footer\": \"Claude Token Monitor\",
                  \"ts\": $(date +%s)
                }]
              }" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            echo "SLACK_WEBHOOK_URL not configured, skipping Slack notification"
          fi
          
      - name: Send email notification (if configured)
        if: steps.check-token.outputs.needs_action == 'true' && steps.check-token.outputs.alert_level == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            // This would require additional setup with email service
            console.log('📧 Email notification would be sent here for critical alerts');
            console.log('Consider setting up with services like SendGrid, AWS SES, etc.');
            
      - name: Log monitoring results
        if: always()
        run: |
          echo "=== Claude OAuth Token Monitoring Results ==="
          echo "Timestamp: $(date -u --iso-8601=seconds)"
          echo "Alert Level: ${{ steps.check-token.outputs.alert_level }}"
          echo "Alert Message: ${{ steps.check-token.outputs.alert_message }}"
          echo "Hours Left: ${{ steps.check-token.outputs.hours_left }}"
          echo "Days Left: ${{ steps.check-token.outputs.days_left }}"
          echo "Expires At: ${{ steps.check-token.outputs.expires_at }}"
          echo "Needs Action: ${{ steps.check-token.outputs.needs_action }}"
          echo "Issues Enabled: ${{ steps.check-issues.outputs.issues_enabled }}"
          echo "Issue Created: ${{ steps.create-issue.outputs.issue_created }}"
          echo "Issue Number: ${{ steps.create-issue.outputs.issue_number }}"
          echo "============================================="
          
      - name: Update monitoring status
        if: always()
        run: |
          echo "Token monitoring completed successfully"
          if [ "${{ steps.check-token.outputs.needs_action }}" = "true" ]; then
            echo "⚠️ Action required: Token renewal needed"
            exit 0  # Don't fail the workflow, just alert
          else
            echo "✅ Token status: OK"
          fi